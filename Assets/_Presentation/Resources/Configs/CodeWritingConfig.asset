%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 6dc6eff0803c4b67afc1e4569656fdbc, type: 3}
  m_Name: CodeWritingConfig
  m_EditorClassIdentifier: 
  _textAsset: {fileID: 4900000, guid: 74301a8172a4c394f935441d0533d4d3, type: 3}
  TextLines:
  - "public class InputListener : MonoBehaviour\r"
  - "{\r"
  - "    private GameInputActions _gameInput;\r"
  - "    private Clicker _clicker;\r"
  - "\r"
  - "    [Inject]\r"
  - "    public void Construct(Clicker clicker)\r"
  - "    {\r"
  - "        _clicker = clicker;\r"
  - "    }\r"
  - "\r"
  - "    private void Awake()\r"
  - "    {\r"
  - "        _gameInput = new GameInputActions();\r"
  - "        _gameInput.Enable();\r"
  - "        EnableInput();\r"
  - "    }\r"
  - "    \r"
  - "    private void OnDestroy()\r"
  - "    {\r"
  - "        DisableInput();\r"
  - "    }\r"
  - "\r"
  - "    public void EnableInput()\r"
  - "    {\r"
  - "        _gameInput.Enable();\r"
  - "        _gameInput.GlobalActionMap.Work.started += Click;\r"
  - "    }\r"
  - "\r"
  - "    public void DisableInput()\r"
  - "    {\r"
  - "        _gameInput.Disable();\r"
  - "        _gameInput.GlobalActionMap.Work.started -= Click;\r"
  - "    }\r"
  - "\r"
  - "    private void Click(InputAction.CallbackContext callbackContext)\r"
  - "    {\r"
  - "        _clicker.Click();\r"
  - "    }\r"
  - "}\r"
  - "    \r"
  - "public class GameState : IState\r"
  - "{\r"
  - "    private readonly IEnumerable<IObjectGenerator> _objectGenerators;\r"
  - "    private readonly IEnumerable<IResettable> _resettable;\r"
  - "    private readonly EntityResetter _entityResetter;\r"
  - "    private readonly ExpirationCounter _expirationCounter;\r"
  - "    private readonly InputListener _inputListener;\r"
  - "    private StateMachine _owner;\r"
  - "    \r"
  - "    public GameState(IEnumerable<IObjectGenerator> objectGenerators, IEnumerable<IResettable>
    resettable, \r"
  - "        EntityResetter entityResetter, ExpirationCounter expirationCounter,
    InputListener inputListener)\r"
  - "    {\r"
  - "        _objectGenerators = objectGenerators;\r"
  - "        _resettable = resettable;\r"
  - "        _entityResetter = entityResetter;\r"
  - "        _expirationCounter = expirationCounter;\r"
  - "        _inputListener = inputListener;\r"
  - "    }\r"
  - "\r"
  - "    public void SetOwner(StateMachine owner)\r"
  - "    {\r"
  - "        _owner = owner;\r"
  - "    }\r"
  - "\r"
  - "    public void Enter()\r"
  - "    {\r"
  - "        foreach (var generator in _objectGenerators)\r"
  - "        {\r"
  - "            generator.StartGeneration();\r"
  - "        }\r"
  - "\r"
  - "        foreach (var resettable in _resettable)\r"
  - "        {\r"
  - "            resettable.Reset();\r"
  - "        }\r"
  - "        \r"
  - "        _inputListener.EnableInput();\r"
  - "        \r"
  - "        _expirationCounter.OnAllDeadlinesExpired += OnAllDeadlinesExpired;\r"
  - "    }\r"
  - "    \r"
  - "    public void Exit()\r"
  - "    {\r"
  - "        _expirationCounter.OnAllDeadlinesExpired -= OnAllDeadlinesExpired;\r"
  - "        \r"
  - "        _entityResetter.Reset();\r"
  - "        _inputListener.DisableInput();\r"
  - "        \r"
  - "        foreach (var generator in _objectGenerators)\r"
  - "        {\r"
  - "            generator.StopGeneration();\r"
  - "        }\r"
  - "    }\r"
  - "\r"
  - "    private void OnAllDeadlinesExpired()\r"
  - "    {\r"
  - "        _owner.ChangeState<DefeatState>();\r"
  - "    }\r"
  - "}\r"
  - "\r"
  - "public class Deadline : IGameEntity, IDamageable\r"
  - "{\r"
  - "    private float _health;\r"
  - "    \r"
  - "    public DeadlineView View { get; set; }\r"
  - "    public float MoveSpeed { get; set; }\r"
  - "    public float Damage { get; set; }\r"
  - "    \r"
  - "    public float Health\r"
  - "    {\r"
  - "        get => _health;\r"
  - "        set\r"
  - "        {\r"
  - "            bool changed = !Mathf.Approximately(_health, value);\r"
  - "            _health = value;\r"
  - "            if(changed)\r"
  - "                OnHealthChanged?.Invoke(this, _health);\r"
  - "        }\r"
  - "    }\r"
  - "\r"
  - "    public event Action<Deadline, float> OnHealthChanged;\r"
  - "}\r"
  - "\r"
  - "public class TaskPlacer\r"
  - "{\r"
  - "    private readonly TaskPlacingPredictionView _taskPlacingPredictionView;\r"
  - "    private readonly ScheduleView _scheduleView;\r"
  - "    private readonly ScheduleGrid _scheduleGrid;\r"
  - "    private readonly WorkCounter _workCounter;\r"
  - "    private readonly IPoolFactory<Task> _taskCreator;\r"
  - "    private readonly int _maxRow;\r"
  - "    \r"
  - "    public TaskPlacer(IRepository<ScriptableObject> dataRepository, ScheduleView
    scheduleView, ScheduleGrid scheduleGrid, \r"
  - "        TaskPlacingPredictionView taskPlacingPredictionView, IPoolFactory<Task>
    taskCreator, WorkCounter workCounter)\r"
  - "    {\r"
  - "        TasksConfig config = dataRepository.GetItem<TasksConfig>().FirstOrDefault();\r"
  - "        if(config == null) return;\r"
  - "        \r"
  - "        _maxRow = config.MaxRow;\r"
  - "        _taskCreator = taskCreator;\r"
  - "        _scheduleGrid = scheduleGrid;\r"
  - "        _scheduleView = scheduleView;\r"
  - "        _taskPlacingPredictionView = taskPlacingPredictionView;\r"
  - "        _workCounter = workCounter;\r"
  - "        _workCounter.OnWorkIsDone += SubscribeOnInput;\r"
  - "        _workCounter.OnNewWork += UnsubscribeFromInput;\r"
  - "    }\r"
  - "\r"
  - "    public void SubscribeOnInput()\r"
  - "    {\r"
  - "        _scheduleView.RaycastInputReceiver.OnRayPointed += ShowPlacePrediction;\r"
  - "        _scheduleView.RaycastInputReceiver.OnRayPointedEnd += HidePlacePrediction;\r"
  - "        _scheduleView.RaycastInputReceiver.OnInputStarted += TryPlaceTask;\r"
  - "    }\r"
  - "\r"
  - "    public void UnsubscribeFromInput()\r"
  - "    {\r"
  - "        _scheduleView.RaycastInputReceiver.OnRayPointed -= ShowPlacePrediction;\r"
  - "        _scheduleView.RaycastInputReceiver.OnRayPointedEnd -= HidePlacePrediction;\r"
  - "        _scheduleView.RaycastInputReceiver.OnInputStarted -= TryPlaceTask;\r"
  - "        if(_taskPlacingPredictionView)\r"
  - "            _taskPlacingPredictionView.HidePlacingPrediction();\r"
  - "    }\r"
  - "    \r"
  - "    private void HidePlacePrediction(Vector3 inputPosition)\r"
  - "    {\r"
  - "        _taskPlacingPredictionView.HidePlacingPrediction();\r"
  - "    }\r"
  - "    \r"
  - "    private void ShowPlacePrediction(Vector3 inputPosition)\r"
  - "    {\r"
  - "        if(!_scheduleGrid.IsOnGrid(inputPosition))\r"
  - "        {\r"
  - "            HidePlacePrediction(inputPosition);\r"
  - "            return;\r"
  - "        }\r"
  - "        \r"
  - "        _taskPlacingPredictionView.ShowPlacingPrediction(_scheduleGrid.GetLocalGridPositionClamped(inputPosition,
    maxRow: _maxRow));\r"
  - "    }\r"
  - "\r"
  - "    private void TryPlaceTask(Vector3 inputPosition)\r"
  - "    {\r"
  - "        if(!_scheduleGrid.IsOnGrid(inputPosition) || !_workCounter.TryNextWork())
    return;\r"
  - "        Task task = _taskCreator.Create();\r"
  - "        task.View.transform.position = inputPosition;\r"
  - "        task.View.transform.rotation = _scheduleView.GridPivot.rotation;\r"
  - "        _scheduleGrid.SnapToGrid(task.View.transform, maxRow: _maxRow);\r"
  - "    }\r"
  - '}'
